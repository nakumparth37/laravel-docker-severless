name: Laravel Fargate CI/CD

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: ${{ secrets.ECR_REGISTRY }}/laravel-php
  CLUSTER_NAME: laravel-cluster37
  SERVICE_NAME: laravel-php-service
  TASK_DEFINITION_FILE: deploy/ecs/laravel-task.json

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout code
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Configure AWS credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # 3. Login to Amazon ECR
    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}

    # 4. Build Docker image
    - name: Build Docker Image
      run: |
        docker build -f deploy/ecs/Dockerfile -t ${{ env.ECR_REPOSITORY }}:latest .

    # 5. Push Docker image to ECR
    - name: Push Docker Image
      run: |
        docker push ${{ env.ECR_REPOSITORY }}:latest

    # 6. Update Task Definition image
    - name: Update Task Definition
      run: |
        jq --arg IMAGE "${{ env.ECR_REPOSITORY }}:latest" '.containerDefinitions[0].image = $IMAGE' ${{ env.TASK_DEFINITION_FILE }} > task-def.json

    # 7. Register ECS Task Definition
    - name: Register ECS Task Definition
      id: register-task
      run: |
        TASK_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://task-def.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        echo "TASK_DEFINITION_ARN=$TASK_ARN" >> $GITHUB_ENV

    # 8. Update ECS Service
    - name: Update ECS Service
      run: |
        aws ecs update-service \
          --cluster ${{ env.CLUSTER_NAME }} \
          --service ${{ env.SERVICE_NAME }} \
          --task-definition ${{ env.TASK_DEFINITION_ARN }} \
          --force-new-deployment

    # 9. Wait for ECS service stability (optional)
    - name: Wait for ECS service stability
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.CLUSTER_NAME }} \
          --services ${{ env.SERVICE_NAME }}
